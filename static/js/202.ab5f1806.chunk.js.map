{"version":3,"file":"static/js/202.ab5f1806.chunk.js","mappings":"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","sources":["components/AddContactForm/AddContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelectors.js","components/AddContactForm/AddContactForm.jsx","components/Filter/Filter.jsx","components/ListOfContacts/ListOfContacts.styled.jsx","components/ListOfContacts/ListOfContacts.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst ButtonAddFriend = styled.button`\n  display: block;\n  margin-top: 25px;\n`;\n\nconst Title = styled.h3`\n  margin-top: 10px;\n  margin-bottom: 5px;\n`;\n\nexport { ButtonAddFriend, Title };\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getFilter = state => state.filter;\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getError = state => state.contacts.error;\n\nexport const isLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = state => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n\n  return contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter);\n  });\n};\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getContacts } from 'redux/contacts/contactsSelectors';\n\nimport { ButtonAddFriend, Title } from './AddContactForm.styled';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const itsValue = e.currentTarget.value;\n    const itsName = e.currentTarget.name;\n\n    if (itsName === 'name') {\n      setName(itsValue);\n    }\n    if (itsName === 'number') {\n      setNumber(itsValue);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.filter(contact => {\n        return contact.name\n          .toLowerCase()\n          .includes(newContact.name.toLowerCase());\n      }).length !== 0\n    ) {\n      alert(`${newContact.name} already in contact list`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Title>Name</Title>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleInput}\n      />\n      <Title>Phone number</Title>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleInput}\n      />\n      <ButtonAddFriend type=\"submit\">Add contact</ButtonAddFriend>\n    </form>\n  );\n};\n","import styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { filterSlice } from 'redux/filter/filerSlice';\nimport { getFilter } from 'redux/contacts/contactsSelectors';\n\nexport const Filter = () => {\n  const { changeFilter } = filterSlice.actions;\n\n  const dispatch = useDispatch();\n\n  const filter = useSelector(getFilter);\n\n  const setFilterHandler = f => dispatch(changeFilter(f.toLowerCase()));\n\n  return (\n    <div>\n      <Title>Find contact by name</Title>\n      <input\n        name=\"filter\"\n        type=\"text\"\n        onChange={e => {\n          setFilterHandler(e.currentTarget.value);\n        }}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nconst Title = styled.p`\n  margin: 0;\n  margin-top: 10px;\n`;\n","import styled from 'styled-components';\n\nconst NotUglyBtn = styled.button`\n  margin-left: 5px;\n  border-radius: 30%;\n  border-color: #901818ce;\n  background-color: #d1212152;\n\n  :active {\n    background-color: #e07474;\n  }\n`;\n\nconst Lishka = styled.li`\n  display: flex;\n  align-items: center;\n`;\n\nexport { Lishka, NotUglyBtn };\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectFilteredContacts } from 'redux/contacts/contactsSelectors';\nimport {\n  deleteContactById,\n  getAllContacts,\n} from 'redux/contacts/contactsOperations';\n\nimport { Lishka, NotUglyBtn } from './ListOfContacts.styled';\n\nexport const ListOfContacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const contactDeleter = id => {\n    dispatch(deleteContactById(id));\n  };\n\n  const listToRender = useSelector(selectFilteredContacts);\n\n  return (\n    <div>\n      <ul>\n        {listToRender.map(({ id, name, number }) => {\n          return (\n            <Lishka key={id}>\n              <span>\n                {name}: {number}\n              </span>\n              <NotUglyBtn type=\"button\" onClick={() => contactDeleter(id)}>\n                Delete\n              </NotUglyBtn>\n            </Lishka>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ListOfContacts } from 'components/ListOfContacts/ListOfContacts';\nimport { useSelector } from 'react-redux';\nimport { isLoading } from 'redux/contacts/contactsSelectors';\nimport styled from 'styled-components';\n\nconst { Title } = require('components/AddContactForm/AddContactForm.styled');\n\nconst Contacts = () => {\n  const loadingMarker = useSelector(isLoading);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <AddContactForm />\n      <Filter />\n      <Title>Contacts</Title>\n      {loadingMarker && <KindaLoader> is updating...</KindaLoader>}\n      <ListOfContacts />\n    </>\n  );\n};\n\nconst KindaLoader = styled.b`\n  position: absolute;\n  transform: translate(110px, -31px);\n`;\n\nexport default Contacts;\n"],"names":["ButtonAddFriend","styled","Title","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getFilter","state","filter","getContacts","contacts","items","isLoading","selectFilteredContacts","contact","name","toLowerCase","includes","AddContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInput","e","itsValue","currentTarget","value","itsName","onSubmit","preventDefault","newContact","length","addContact","alert","type","pattern","title","required","onChange","Filter","changeFilter","filterSlice","f","NotUglyBtn","Lishka","ListOfContacts","useEffect","getAllContacts","listToRender","map","onClick","deleteContactById","contactDeleter","require","KindaLoader","loadingMarker"],"sourceRoot":""}